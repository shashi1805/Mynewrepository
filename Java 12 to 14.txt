-----------------------------------------------------------------------------------------------------------------

Lab 12.log4j
12.1)package vjit;


import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

public class Log4jDemo {

  //create a logger for Log4jDemo class
	static Logger logger=LogManager.getLogger(Log4jDemo.class.getName());

public static void main(String args[]) {

  // create log messages for each priority level
	logger.error("logged");
	logger.debug("not logger");
	logger.info("log info");
	logger.warn("warning");
	logger.fatal("system fatal");
	
      }
}


---------------------------------------------------------------------------------------------------------------
12.2)
package vjit;

import labbean.Message;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

   public class Log4jDemo3 
   {

    //create a logger for Log4jDemo3 class
	static Logger logger=LogManager.getLogger(Log4jDemo3.class.getName());

     public static void main(String args[]) 
     {
    	 

             //create an instance of Message class
	         @SuppressWarnings("unused")
			Logger log=Logger.getLogger("Message");
	         Message m=new Message();
             //call setMessage() method
	         m.setMessage("msg");
	         
             //print the log messages using getMessage() method
	         m.getMessage();
	
             // write log message statements for each priority level
	         logger.error("logged");
	         logger.debug("not logger");
	         logger.info("log info");
	         logger.warn("warning");
	         logger.fatal("system fatal");
      }
}


----------------------------------------------------------------------------------------------------------------------
12.3)

package vjit;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import labbean.Message;

public class Log4jDemo2
{
	static Logger log=LogManager.getLogger(Message.class.getName());
   //create a logger for Log4jDemo2 class

    public static void main(String args[])
    {

        for(int i=1 ; i<50000; i++)
        {
           System.out.println("Counter = " + i);
           log.debug("This is my debug message. Counter = " + i);
           log.error("error message");
       	   log.info("info message");
       	   log.warn("warning message");
       	   log.fatal("fatal message");
       	   
           // write log message statements for remaining priority levels 
		  //in the same way
            }
      }
}
-------------------------------------------------------------------------------------------------------------------
12.4)package vjit;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

public class HelloWorld { 
static final Logger logger = Logger.getLogger(HelloWorld.class);  
public static void main(String[] args) {         
PropertyConfigurator.configure("log4j.properties");
logger.debug("Hello World!");  
logger.warn("Sample warn message");    
logger.error("Sample error message");   
} 
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lab 13: Multithreading

13.1)package vjit;

import java.io.*;

public class CopyDataThread 
{
	public CopyDataThread(FileReader fi,FileWriter fw)throws Exception
	{
		BufferedReader br = new BufferedReader(fi);
		BufferedWriter bw = new BufferedWriter(fw);
		String data = null;
		int j=10;
		while((data=br.readLine())!=null)
		{
			char[] c = data.toCharArray();
			for(int i=0;i<c.length;i++)
			{
				bw.write(c[i]);
				if(i==j)
				{
					j+=10;
					System.out.println("10 characters copied");
					Thread.sleep(5000);
				}	
			}
			
		}
		br.close();
		bw.close();
		fi.close();
		fw.close();
	}


}
package vjit;
import java.util.*;

public class TimerThread implements Runnable
{

	public static void main(String[] args) 
	{
		//Task t1 = new Task("task1");
		Timer t = new Timer();
		//t.schedule(task,10000);
	}

	public void run() 
	{
		
	}

}
package vjit;

import java.io.FileReader;
import java.io.FileWriter;

public class FileProgram extends Thread 
{
	public static void main(String[] args)throws Exception 
	{
		FileReader fi = new FileReader("C:\\Users\\my\\eclipse-workspace\\multithreading\\src\\vjit\\Account.java");
		FileWriter fw = new FileWriter("C:\\Users\\my\\eclipse-workspace\\multithreading\\src\\vjit\\Account.java");
		CopyDataThread c = new CopyDataThread(fi,fw);
	}
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13.2)
package vjit;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

public class MyTimerTask extends TimerTask {

    @Override
    public void run() {
        System.out.println("Timer task started at:"+new Date());
        completeTask();
        System.out.println("Timer task finished at:"+new Date());
    }

    private void completeTask() {
        try {
            //assuming it takes 5 secs to complete the task
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    
    public static void main(String args[]){
        TimerTask timerTask = new MyTimerTask();
        //running timer task as daemon thread
        Timer timer = new Timer(true);
        timer.scheduleAtFixedRate(timerTask, 0, 10*1000);
        System.out.println("TimerTask started");
        //cancel after sometime
        try {
            Thread.sleep(120000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        timer.cancel();
        System.out.println("TimerTask cancelled");
        try {
            Thread.sleep(30000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

}
 
output: -
TimerTask started
Timer task started at:Fri Feb 21 20:23:19 IST 2020
Timer task finished at:Fri Feb 21 20:23:25 IST 2020
Timer task started at:Fri Feb 21 20:23:29 IST 2020
Timer task finished at:Fri Feb 21 20:23:34 IST 2020
Timer task started at:Fri Feb 21 20:23:39 IST 2020
Timer task finished at:Fri Feb 21 20:23:44 IST 2020
Timer task started at:Fri Feb 21 20:23:49 IST 2020
Timer task finished at:Fri Feb 21 20:23:54 IST 2020
Timer task started at:Fri Feb 21 20:23:59 IST 2020
Timer task finished at:Fri Feb 21 20:24:04 IST 2020
Timer task started at:Fri Feb 21 20:24:09 IST 2020
Timer task finished at:Fri Feb 21 20:24:14 IST 2020


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------
Lab 14: Lambda Expressions and Stream API
14.1)package vjit;
import java.util.Scanner;
import java.util.function.BiFunction;

public class PowerValue {

	public static  void main(String args[])
	{
		PowerFunc pf= (x,y)-> Math.pow(x,y);
		Scanner sc=new Scanner(System.in);
		double x,y;
		System.out.println("Enter x value");
		x=sc.nextDouble();
		System.out.println("Enter y value");
		y=sc.nextDouble();
		double res=pf.powerVal(x,y);
		System.out.println("Power using lambda expression is "+res);
		BiFunction<Double,Double,Double> bi=(a,b) ->Math.pow(x,y);
		System.out.println("Using Bi function:"+bi.apply(x,y));
	}
}
package vjit;

public interface PowerFunc {

	double powerVal(double x, double y);

	
}
output: -
Enter x value
5
Enter y value
2
Power using lambda expression is 25.0
Using Bi function:25.0
-------------------------------------------------------------------------------------------------------------
14.2)
package vjit;

import java.util.Scanner;
import java.util.function.Function;

public class InsertSpace {

	private static void formatString(String str) {
		Function<String,String> f= (s)->
		{StringBuilder result = new StringBuilder();
		for (int i = 0; i < str.length(); i++) {
		   if (i > 0) {
		      result.append(" ");
		    }

		   result.append(str.charAt(i));
		}

		return result.toString();
		};
		String res=f.apply(str);
		System.out.println(res);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the String");
		String str=sc.next();
		formatString(str);
		sc.close();
	}
}


output: -Enter the String
shashi
s h a s h i
------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------
14.3)package vjit;
import java.util.Scanner;
import java.util.function.BiPredicate;


public class LambdaUserName {

		public static void check(String user,String pwd)
		{
			BiPredicate<String,String> bp= (u,p)->{
				if(user.equals("shashi") && pwd.equals("970"))
					return true;
				else
				return false;
					};
					System.out.println(bp.test(user, pwd));
		}
		public static void main(String[] args) {
			// TODO Auto-generated method stub
			Scanner sc=new Scanner(System.in);
			System.out.println("Enter user name");
			String uname=sc.next();
			System.out.println("Enter password");
			String pwd=sc.next();
			check(uname,pwd);
		}

	}

OUT Put: -
Enter user name

shashi
Enter password
970
true
------------------------------------------------------------------------------------------------------------------
14.4)
package vjit;
interface MethodReferenceInterface
{
	MethodReferenceEx display(String a,String b);
}
class MethodReferenceEx
{
	String f,l;

	public MethodReferenceEx(String f, String l) {
		//super();
		this.f = f;
		this.l = l;
		System.out.println(f+" "+l);
	}

	public String getF() {
		return f;
	}

	public void setF(String f) {
		this.f = f;
	}

	public String getL() {
		return l;
	}

	public void setL(String l) {
		this.l = l;
	}
	
}
public class DemonstateInstance {	
	public static void main(String args[])
	{
		MethodReferenceInterface mri= MethodReferenceEx::new;
		mri.display("shashi", "reddy");
	}
}
Out put:shashi reddy
--------------------------------------------------------------------------------------------------------------------
14.5)package vjit;
import java.util.Scanner;
import java.util.function.Function;

public class Factorial {

		public static int factorial(int n)
		{
			int res=1;
			for(int i=1;i<=n;i++)
			{
				 res=res*i;
			}
			return res;
		}
		public static void main(String[] args) {
			// TODO Auto-generated method stub
			Scanner sc=new Scanner(System.in);
			System.out.println("Enter num for factorial");
			int n=sc.nextInt();
			Function<Integer,Integer> fact=Factorial::factorial;
			System.out.println("factorial = "+fact.apply(n));
			
			sc.close();
		}

	}

OUTPUT: -
Enter num for factorial
6
factorial = 720
-------------------------------------------------------------------------------------------------------------------
